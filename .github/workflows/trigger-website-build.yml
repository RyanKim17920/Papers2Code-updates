name: Trigger Website Build

# This workflow automatically notifies target repositories when content is updated
# See INTEGRATION_GUIDE.md for setup instructions
on:
  push:
    branches:
      - main
      - master
    paths:
      - '_posts/**.md'
      - '_posts/**.markdown'

  # Allow manual triggering via GitHub Actions UI
  workflow_dispatch:

jobs:
  trigger-rebuild:
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Notify repositories to rebuild
        run: |
          echo "Content update detected in _posts/"
          echo "Triggering rebuild for connected websites..."
          
          # Get the list of changed markdown files
          git diff --name-only HEAD~1 HEAD | grep -E "^_posts/.*\.(md|markdown)$" || echo "No markdown files changed"

      - name: Trigger repository dispatch event
        env:
          GITHUB_TOKEN: ${{ secrets.DISPATCH_TOKEN }}
        run: |
          # Read target repositories from repository secrets
          # Expected format: OWNER/REPO,OWNER/REPO (comma-separated)
          # Example: "RyanKim17920/my-website,JohnDoe/blog"
          TARGET_REPOS="${{ secrets.TARGET_REPOSITORIES }}"
          
          if [ -z "$TARGET_REPOS" ]; then
            echo "‚ö†Ô∏è  No target repositories configured."
            echo "Please set the TARGET_REPOSITORIES secret in repository settings."
            echo "Format: 'owner1/repo1,owner2/repo2'"
            echo ""
            echo "See INTEGRATION_GUIDE.md for setup instructions."
            exit 0
          fi
          
          echo "üì° Sending dispatch events to target repositories..."
          echo ""
          
          # Split the comma-separated list of repositories
          IFS=',' read -ra REPOS <<< "$TARGET_REPOS"
          
          for repo in "${REPOS[@]}"; do
            repo=$(echo "$repo" | xargs) # Trim whitespace
            echo "‚Üí Notifying: $repo"
            
            # Send repository dispatch event via GitHub API
            # The target repository must have a workflow listening for "content-update" events
            HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" -X POST \
              -H "Accept: application/vnd.github.v3+json" \
              -H "Authorization: token $GITHUB_TOKEN" \
              "https://api.github.com/repos/$repo/dispatches" \
              -d '{"event_type":"content-update","client_payload":{"repository":"'"$GITHUB_REPOSITORY"'","ref":"'"$GITHUB_REF"'","sha":"'"$GITHUB_SHA"'"}}')
            
            # Check HTTP status code
            if [ "$HTTP_STATUS" -eq 204 ] || [ "$HTTP_STATUS" -eq 200 ]; then
              echo "  ‚úÖ Success (HTTP $HTTP_STATUS)"
            else
              echo "  ‚ùå Failed (HTTP $HTTP_STATUS)"
              echo "  Check: Token permissions, repository name, target repo workflow"
            fi
            echo ""
          done
          
          echo "üì§ Dispatch events sent to ${#REPOS[@]} repository/repositories"

      - name: Summary
        run: |
          echo "### üì¨ Content Update Notification Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Target repositories:** \`${{ secrets.TARGET_REPOSITORIES }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Changed markdown files:**" >> $GITHUB_STEP_SUMMARY
          git diff --name-only HEAD~1 HEAD | grep -E "^_posts/.*\.(md|markdown)$" | while read file; do
            echo "- \`$file\`" >> $GITHUB_STEP_SUMMARY
          done || echo "- _(No markdown files changed)_" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** \`$GITHUB_SHA\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Target repositories should now be rebuilding with the updated content." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üìñ [View Integration Guide](https://github.com/$GITHUB_REPOSITORY/blob/main/INTEGRATION_GUIDE.md)" >> $GITHUB_STEP_SUMMARY
